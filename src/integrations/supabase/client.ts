
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://kymbemmaofuecrjumcqs.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt5bWJlbW1hb2Z1ZWNyanVtY3FzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM1MzAxMjIsImV4cCI6MjA1OTEwNjEyMn0.ANGrhX9G5CSr6WlKiInITP5bG9PhDWAeOS8DMS2Wy2o";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Define custom types for tables that need to be used but aren't in the Database type yet
export type BookmarkTable = {
  id: string;
  user_id: string;
  article_id: string;
  created_at: string;
}

export type FollowTable = {
  id: string;
  follower_id: string;
  followed_id: string;
  created_at: string;
}

export type NotificationTable = {
  id: string;
  user_id: string;
  actor_id: string;
  article_id: string | null;
  type: string;
  is_read: boolean;
  created_at: string;
}

export type CommentLikesTable = {
  id: string;
  user_id: string;
  comment_id: string;
  created_at: string;
}

// Define notification type with full structure for frontend use
export type Notification = {
  id: string;
  user_id: string;
  actor_id: string;
  article_id: string | null;
  type: string;
  is_read: boolean;
  created_at: string;
  actor: {
    username: string;
    avatar_url: string | null;
  };
  article?: {
    id: string;
    title: string;
  };
}

// Create helper functions to handle table access since TypeScript doesn't know about them
export const tablesWithoutTypes = {
  bookmarks: () => supabase.from('bookmarks'),
  follows: () => supabase.from('follows'),
  notifications: () => supabase.from('notifications'),
  comment_likes: () => supabase.from('comment_likes')
};
