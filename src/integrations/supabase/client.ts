
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://kymbemmaofuecrjumcqs.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt5bWJlbW1hb2Z1ZWNyanVtY3FzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM1MzAxMjIsImV4cCI6MjA1OTEwNjEyMn0.ANGrhX9G5CSr6WlKiInITP5bG9PhDWAeOS8DMS2Wy2o";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Define custom types for tables that need to be used but aren't in the Database type yet
export type BookmarkTable = {
  id: string;
  user_id: string;
  article_id: string;
  created_at: string;
}

export type FollowTable = {
  id: string;
  follower_id: string;
  followed_id: string;
  created_at: string;
}

export type NotificationTable = {
  id: string;
  user_id: string;
  actor_id: string;
  article_id: string | null;
  type: string;
  is_read: boolean;
  created_at: string;
}

export type CommentLikesTable = {
  id: string;
  user_id: string;
  comment_id: string;
  created_at: string;
}

// Define extended comment type with reply features
export type CommentWithReplyInfo = {
  id: string;
  article_id: string;
  content: string;
  created_at: string;
  updated_at: string;
  user_id: string;
  parent_id: string | null;
  mention_user_id: string | null;
  profiles?: {
    username: string;
    avatar_url: string | null;
  } | null;
  mention_profile?: {
    username: string;
  } | null;
}

// Define notification type with full structure for frontend use
export type Notification = {
  id: string;
  user_id: string;
  actor_id: string;
  article_id: string | null;
  type: string;
  is_read: boolean;
  created_at: string;
  actor: {
    username: string;
    avatar_url: string | null;
  } | null;
  article?: {
    id: string;
    title: string;
  } | null;
}

// Create helper functions to handle table access since TypeScript doesn't know about them
export const tablesWithoutTypes = {
  bookmarks: () => supabase.from('bookmarks'),
  follows: () => supabase.from('follows'),
  notifications: () => supabase.from('notifications'),
  comment_likes: () => supabase.from('comment_likes')
};

// Function to manually get actor information for notifications
export const getNotificationsWithActors = async (userId: string): Promise<Notification[]> => {
  try {
    // First get the notifications
    const { data: notificationsData, error: notificationsError } = await supabase
      .from('notifications')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false });
      
    if (notificationsError) throw notificationsError;
    if (!notificationsData || notificationsData.length === 0) return [];
    
    // Then enhance each notification with actor and article information
    const enhancedNotifications = await Promise.all(notificationsData.map(async (notification) => {
      // Get actor info
      const { data: actorData } = await supabase
        .from('profiles')
        .select('username, avatar_url')
        .eq('id', notification.actor_id)
        .single();
        
      // Get article info if it exists
      let articleData = null;
      if (notification.article_id) {
        const { data: article } = await supabase
          .from('articles')
          .select('id, title')
          .eq('id', notification.article_id)
          .single();
          
        articleData = article;
      }
      
      return {
        ...notification,
        actor: actorData,
        article: articleData
      } as Notification;
    }));
    
    return enhancedNotifications;
  } catch (error) {
    console.error('Error fetching notifications with actors:', error);
    return [];
  }
};

// Add this function to create missing columns in tables if needed
export const ensureColumnsExist = async () => {
  try {
    console.log("Checking if parent_id and mention_user_id columns exist in comments table");
    
    // Check if parent_id column exists
    const { data: parentIdExists, error: parentIdError } = await supabase.rpc(
      'check_column_exists',
      { table_name: 'comments', column_name: 'parent_id' }
    );
    
    // Check if mention_user_id column exists
    const { data: mentionUserIdExists, error: mentionUserIdError } = await supabase.rpc(
      'check_column_exists',
      { table_name: 'comments', column_name: 'mention_user_id' }
    );
    
    // If either column doesn't exist, create them
    if (!parentIdExists || !mentionUserIdExists) {
      console.log("One or more columns are missing. Adding them to the comments table");
      
      // We'll use raw SQL through RPC to add the missing columns
      if (!parentIdExists) {
        await supabase.rpc('add_column_if_not_exists', {
          table_name: 'comments',
          column_name: 'parent_id',
          column_type: 'uuid'
        });
      }
      
      if (!mentionUserIdExists) {
        await supabase.rpc('add_column_if_not_exists', {
          table_name: 'comments',
          column_name: 'mention_user_id',
          column_type: 'uuid'
        });
      }
    }
    
    console.log("Column check completed");
  } catch (error) {
    console.error("Error checking or adding columns:", error);
  }
};

// Export the function to create buckets (needed for profile-edit-form.tsx)
export { ensureBucketExists } from './create-buckets';
